# -*- coding: utf-8 -*-
"""partitioned_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iw4WJPeC_T6xpV49M5u-AAkYpPs9KBq3
"""

import math
import warnings
from typing import List, Optional, Tuple, Union
from dataclasses import dataclass
import torch
import torch.utils.checkpoint
from torch import nn
from transformers import PreTrainedModel
import gc
from transformers import Phi3Config
from transformers.utils import ModelOutput
from safetensors import safe_open

from model_ref import (
    _prepare_4d_causal_attention_mask_with_cache_position,
    Phi3RMSNorm,
    Phi3RotaryEmbedding,
    Phi3SuScaledRotaryEmbedding,
    Phi3YarnScaledRotaryEmbedding,
    Phi3LongRoPEScaledRotaryEmbedding,
    rotate_half,
    apply_rotary_pos_emb,
    Phi3MLP,
    repeat_kv,
    Phi3Attention,
    Phi3FlashAttention2,
    Phi3SdpaAttention,
    Phi3DecoderLayer,
    NewPhi3Config
)

import os
os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'expandable_segments:True'

@dataclass
class FinalOutput(ModelOutput):
#     loss: Optional[torch.FloatTensor] = None
    logits: torch.FloatTensor = None
#     past_key_values: Optional[Tuple[Tuple[torch.FloatTensor]]] = None
#     hidden_states: Optional[Tuple[torch.FloatTensor, ...]] = None
#     attentions: Optional[Tuple[torch.FloatTensor, ...]] = None

class Phi3Head(nn.Module):
    def __init__(self, config, head):
        super().__init__()
        self.config = config
        self.head_length = head

        self.layers = nn.ModuleList(
            [Phi3DecoderLayer(self.config, layer_idx).to('cuda') for layer_idx in range(self.head_length)]
        )


    def forward(
        self,
        hidden_states: torch.LongTensor = None,
        causal_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[List[torch.FloatTensor]] = None,
        cache_position: Optional[torch.LongTensor] = None,
        next_decoder_cache : Optional[torch.LongTensor] = None
    ):

        
        for decoder_layer in self.layers:

            layer_outputs = decoder_layer(
                    hidden_states,
                    attention_mask=causal_mask,
                    position_ids=position_ids,
                    past_key_value=past_key_values,
                    cache_position=cache_position,
                )

            hidden_states = layer_outputs[0]

#             next_decoder_cache = layer_outputs[1]

        return (hidden_states, causal_mask, position_ids, cache_position, next_decoder_cache)

class Phi3Body(nn.Module):
    def __init__(self, config, head, body):
        super().__init__()
        self.config = config
        self.body_length = body - head

        self.layers = nn.ModuleList(
            [Phi3DecoderLayer(self.config, layer_idx).to('cuda') for layer_idx in range(self.body_length)]
        )

        self._attn_implementation = self.config._attn_implementation
        self.gradient_checkpointing = False

    def forward(
        self,
        head_output,
        past_key_values: Optional[List[torch.FloatTensor]] = None,
    ):
        hidden_states = head_output[0]
        next_decoder_cache = head_output[4]
        causal_mask = head_output[1]
        position_ids = head_output[2]
        cache_position = head_output[3]
        for decoder_layer in self.layers:

            layer_outputs = decoder_layer(
                    hidden_states,
                    attention_mask=head_output[1],
                    position_ids=head_output[2],
                    past_key_value=past_key_values,
                    cache_position=head_output[3],
                )

            hidden_states = layer_outputs[0]

            #next_decoder_cache = layer_outputs[1]
        return (hidden_states, causal_mask, position_ids, cache_position, next_decoder_cache)

class Phi3Tail(nn.Module):
    def __init__(self, config, body):
        super().__init__()
        self.config = config
        self.vocab_size = self.config.vocab_size
        self.norm = Phi3RMSNorm(config.hidden_size, eps=config.rms_norm_eps).to('cuda')
        self.lm_head = nn.Linear(config.hidden_size, config.vocab_size, bias=False).to('cuda')
        self.tail_length = self.config.num_hidden_layers - body

        self.layers = nn.ModuleList(
            [Phi3DecoderLayer(self.config, layer_idx).to('cuda') for layer_idx in range(self.tail_length)]
        )

        self._attn_implementation = self.config._attn_implementation
        self.gradient_checkpointing = False

    def forward(
        self,
        body_output,
        past_key_values: Optional[List[torch.FloatTensor]] = None,
    ):

        hidden_states = body_output[0]
        next_decoder_cache = body_output[4]
 
        for decoder_layer in self.layers:

            layer_outputs = decoder_layer(
                    hidden_states,
                    attention_mask=body_output[1],
                    position_ids=body_output[2],
                    past_key_value=past_key_values,
                    cache_position=body_output[3],
                )

            hidden_states = layer_outputs[0]

            #next_decoder_cache = layer_outputs[1]

        hidden_states = self.norm(hidden_states)

        logits = self.lm_head(hidden_states)
        logits = logits.float()

        return (logits, next_decoder_cache)

class CustomedPhi3ForCausalLM(PreTrainedModel):
    _tied_weights_keys = ["lm_head.weight"]

    def __init__(self, tokenizer, file_num, config: NewPhi3Config):
        super().__init__(config)
        self.tokenizer = tokenizer
        self.config = config
        self.file_num = file_num
        self.head = self.config.head
        self.body = self.config.body
        self.vocab_size = self.tokenizer.vocab_size
        self.embed_tokens = nn.Embedding(self.vocab_size+64, self.config.hidden_size).to('cuda')
        self.embed_dropout = nn.Dropout(self.config.embd_pdrop)
        self._attn_implementation = self.config._attn_implementation
        self.gradient_checkpointing = False

        

    def load_weights(self, partial_model, file_num, start, end):
        """
        외장 메모리에서 decoder layer [start,end)까지 가져오기 코드
        여기에 저장하기
        """
        keys = []
        base_file_path_template = '/nas/user/hayoung/model-0000{}-of-00006.safetensors'
        base_key_name = "model.layers."
        included_layers = ['.input_layernorm.weight','.mlp.down_proj.weight', '.mlp.gate_up_proj.weight',
                           '.post_attention_layernorm.weight','.self_attn.o_proj.weight',
                           '.self_attn.qkv_proj.weight']

        failed_name = []
        file_path = base_file_path_template.format(file_num)

        with safe_open(file_path, framework="pt", device="cuda") as f:
            if start == 0:
                tensor = f.get_tensor('model.embed_tokens.weight')
                self.embed_tokens.weight.copy_(tensor)
            for i in range(start, end):
                layer_name = base_key_name + str(i)
                for name in included_layers:
                    full_name = layer_name + name
                    try:
                        tensor = f.get_tensor(full_name)
                        partial_model.state_dict()[full_name[5:]].copy_(tensor)
                    except:
                        failed_name.append((full_name, file_num))

            if end == 40:
                tensor = f.get_tensor('model.norm.weight')
                partial_model.state_dict()['norm.weight'].copy_(tensor)
                tensor = f.get_tensor('lm_head.weight')
                partial_model.state_dict()['lm_head.weight'].copy_(tensor)
   
        print(failed_name)
    
    def get_input_embeddings(self):
        return self.embed_tokens

    def set_input_embeddings(self, value):
        self.embed_tokens = value
    
    def _update_causal_mask(
        self,
        attention_mask,
        input_tensor,
        cache_position,
        past_key_values
    ):
        # TODO: As of torch==2.2.0, the `attention_mask` passed to the model in `generate` is 2D and of dynamic length even when the static
        # KV cache is used. This is an issue for torch.compile which then recaptures cudagraphs at each decode steps due to the dynamic shapes.
        # (`recording cudagraph tree for symint key 13`, etc.), which is VERY slow. A workaround is `@torch.compiler.disable`, but this prevents using
        # `fullgraph=True`. See more context in https://github.com/huggingface/transformers/pull/29114

        if self.config._attn_implementation == "flash_attention_2":
            if attention_mask is not None and 0.0 in attention_mask:
                return attention_mask
            return None

        # For SDPA, when possible, we will rely on its `is_causal` argument instead of its `attn_mask` argument, in
        # order to dispatch on Flash Attention 2. This feature is not compatible with static cache, as SDPA will fail
        # to infer the attention mask.
        past_seen_tokens = past_key_values.get_seq_length() if past_key_values is not None else 0
     
        dtype, device = input_tensor.dtype, input_tensor.device
        min_dtype = torch.finfo(dtype).min
        sequence_length = input_tensor.shape[1]
        target_length = (
                attention_mask.shape[-1]
                if isinstance(attention_mask, torch.Tensor)
                else past_seen_tokens + sequence_length + 1
            )

        # In case the provided `attention` mask is 2D, we generate a causal mask here (4D).
        causal_mask = _prepare_4d_causal_attention_mask_with_cache_position(
            attention_mask,
            sequence_length=sequence_length,
            target_length=target_length,
            dtype=dtype,
            device=device,
            min_dtype=min_dtype,
            cache_position=cache_position,
            batch_size=input_tensor.shape[0],
        )

        if (
            self.config._attn_implementation == "sdpa"
            and attention_mask is not None
            and attention_mask.device.type == "cuda"
            and not output_attentions
        ):
            # Attend to all tokens in fully masked rows in the causal_mask, for example the relevant first rows when
            # using left padding. This is required by F.scaled_dot_product_attention memory-efficient attention path.
            # Details: https://github.com/pytorch/pytorch/issues/110213
            causal_mask = AttentionMaskConverter._unmask_unattended(causal_mask, min_dtype)

        return causal_mask


    def forward(
        self,
        input_ids: torch.LongTensor = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[List[torch.FloatTensor]] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        labels: Optional[torch.LongTensor] = None,
        use_cache: Optional[bool] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        return_dict: Optional[bool] = None,
        cache_position: Optional[torch.LongTensor] = None,
    ):
        with torch.no_grad():
            inputs_embeds = self.embed_tokens(input_ids)
            past_seen_tokens = past_key_values.get_seq_length() if past_key_values is not None else 0
            cache_position = torch.arange(
                    past_seen_tokens, past_seen_tokens + inputs_embeds.shape[1], device=inputs_embeds.device
                )
            if position_ids is None:
                position_ids = cache_position.unsqueeze(0)

            causal_mask = self._update_causal_mask(
                attention_mask, inputs_embeds, cache_position, past_key_values
            )

            hidden_states = inputs_embeds
            next_decoder_cache = None

            gc.collect()

            Head_Model = Phi3Head(self.config, self.head)
            self.load_weights(Head_Model, 1, 0, self.head)
            head_output = Head_Model(hidden_states, causal_mask, position_ids, past_key_values, cache_position, next_decoder_cache)
            del Head_Model
            gc.collect()
            torch.cuda.empty_cache()  # 명시적으로 GPU 메모리 해제

            Body_Model = Phi3Body(self.config, self.head, self.body)
            self.load_weights(Body_Model, 2, self.head, self.body)
            body_output = Body_Model(head_output, past_key_values)
            del head_output
            del Body_Model
            gc.collect()
            torch.cuda.empty_cache()  # 명시적으로 GPU 메모리 해제

            self.body = 38
            Tail_Model = Phi3Tail(self.config, self.body)
            self.load_weights(Tail_Model, 6, self.body, self.config.num_hidden_layers)
            output = Tail_Model(body_output, past_key_values)
            del body_output
            del Tail_Model
            gc.collect()
            torch.cuda.empty_cache()  # 명시적으로 GPU 메모리 해제

            logits = output[0]

        return FinalOutput(logits=logits)
       

    # Copied from transformers.models.llama.modeling_llama.LlamaForCausalLM.prepare_inputs_for_generation
    def prepare_inputs_for_generation(
        self,
        input_ids,
        past_key_values=None,
        attention_mask=None,
        cache_position=None,
        position_ids=None,
        use_cache=True,
        **kwargs,
    ):

        if past_key_values is not None:
            if input_ids.shape[1] != cache_position.shape[0]:  # Default case (the "else", a no op, is Exception 2)
                input_ids = input_ids[:, cache_position]

        if attention_mask is not None and position_ids is None:
            # create position_ids on the fly for batch generation
            position_ids = attention_mask.long().cumsum(-1) - 1
            position_ids.masked_fill_(attention_mask == 0, 1)
            if past_key_values:
                position_ids = position_ids[:, -input_ids.shape[1] :]

                # This `clone` call is needed to avoid recapturing cuda graphs with `torch.compile`'s  `mode="reduce-overhead`, as otherwise the input `position_ids` would have various stride during the decoding. Here, simply using `.contiguous()` is not sufficient as in the batch size = 1 case, `position_ids` is already contiguous but with varying stride which retriggers a capture.
                position_ids = position_ids.clone(memory_format=torch.contiguous_format)


        model_inputs = {"input_ids": input_ids.clone(memory_format=torch.contiguous_format), "inputs_embeds": None}

#         if isinstance(past_key_values, StaticCache) and attention_mask.ndim == 2:

#             batch_size, sequence_length = model_inputs["input_ids"].shape
#             device = model_inputs["input_ids"].device

#             dtype = self.lm_head.weight.dtype
#             min_dtype = torch.finfo(dtype).min

#             attention_mask = _prepare_4d_causal_attention_mask_with_cache_position(
#                 attention_mask,
#                 sequence_length=sequence_length,
#                 target_length=past_key_values.get_max_length(),
#                 dtype=dtype,
#                 device=device,
#                 min_dtype=min_dtype,
#                 cache_position=cache_position,
#                 batch_size=batch_size,
#             )

        model_inputs.update(
            {
                "position_ids": position_ids,
                "cache_position": cache_position,
                "past_key_values": past_key_values,
                "use_cache": use_cache,
                "attention_mask": attention_mask,
            }
        )
        return model_inputs